import textwrap
from pathlib import Path

from vivamir.vivamir import Vivamir, FilesetKind


def _generate_commons(vivamir: Vivamir) -> str:
    return f"""
        ### Generated by vivamir.
        # Do not edit manually.
        #
        # Common procedures and variables.
        # Version 1.0.1
        
        ## Check if script is running in correct Vivado version.
        set supported_vivado_version {{{vivamir.vivado.version}}}
        set current_vivado_version [version -short]
        
        if {{ [string first $current_vivado_version $supported_vivado_version] == -1 }} {{
           puts "The version $current_vivado_version is not supported. Supported versions are $supported_vivado_version"
           return 1
        }}

        ## Close the current project
        if ![catch current_project] {{
            close_project
        }}

        ## Atexit utility
        proc atexit {{ newbody }} {{
            if {{ [catch {{set oldbody [info body exit]}}] }} {{
                rename exit builtin_exit
                set oldbody {{ builtin_exit $returnCode }}
            }}

            proc exit {{ {{returnCode 0}} }} [subst -nocommands {{
                apply [list [list {{returnCode 0}}] [list $newbody]] \\$returnCode
                apply [list [list {{returnCode 0}}] [list $oldbody]] \\$returnCode
            }}]
        }}

        ## Get root folder
        set root [file dirname [file dirname [file normalize [info script]]]]
        set root_name [file rootname [file tail $root]]

        ### From Vivamir
        set project_name new-proj

    """


def _generate_project(vivamir: Vivamir) -> str:
    # Allows for sets of Path objects.
    Path.__hash__ = lambda self: hash(str(self.resolve()))

    filesets = {
        FilesetKind.DES: set(fileset.path for fileset in vivamir.filesets if fileset.kind == FilesetKind.DES),
        FilesetKind.SIM: set(fileset.path for fileset in vivamir.filesets if fileset.kind == FilesetKind.SIM),
    }

    return f"""
        ### Generated by vivamir.
        # Do not edit manually.
        #
        # Creates the project.
        # Version 1.0.1
        
        ### Commons
        source commons.tcl

        ## Project Configuration
        set block_designs [list \\
            {'\n            '.join(f'"$::root/{bd}" \\' for bd in vivamir.block_designs.trusted)}
        ]
        set includes [list \\
            {'\n            '.join(f'"{file}" \\' for file in sorted(vivamir.includes))}
        ]
        set des_filesets [list \\
            {'\n            '.join(f'"$::root/{file}" \\' for file in sorted(filesets[FilesetKind.DES]))}
        ]
        set sim_filesets [list \\
            {'\n            '.join(f'"$::root/{file}" \\' for file in sorted(filesets[FilesetKind.SIM]))}
        ]
        set ignores [list \\
            {'\n            '.join(f'{file} \\' for file in sorted(vivamir.ignore.list))}
        ]
        
        ## Expand
        set ignore_files_dict {{}}
        foreach ignore $::ignores {{
            foreach file [glob -nocomplain -directory $::root -- $ignore] {{
                dict set ignore_files_dict $file ""
            }}
        }}
        
        proc rglob {{dirlist globlist}} {{
            set result {{}}
            set recurse {{}}
            foreach dir $dirlist {{
                    if ![file isdirectory $dir] {{
                            return -code error "'$dir' is not a directory"
                    }}
                    foreach pattern $globlist {{
                            lappend result {{*}}[glob -nocomplain -directory $dir -- $pattern]
                    }}
                    foreach file [glob -nocomplain -directory $dir -- *] {{
                            set file [file join $dir $file]
                            if [file isdirectory $file] {{
                                    set fileTail [file tail $file]
                                    if {{!($fileTail eq "." || $fileTail eq "..")}} {{
                                            lappend recurse $file
                                    }}
                            }}
                    }}
            }}
            if {{[llength $recurse] > 0}} {{
                    lappend result {{*}}[rglob $recurse $globlist]
            }}
            return $result
        }}

        set des_files {{}}
        foreach file [rglob $des_filesets {{*.*}}] {{
            if {{![dict exists $ignore_files_dict $file]}} {{
                lappend des_files $file
            }}
        }}
        
        set sim_files {{}}
        foreach file [rglob $sim_filesets {{*.*}}] {{
            if {{![dict exists $ignore_files_dict $file]}} {{
                lappend sim_files $file
            }}
        }}
        
        ### Force create project
        create_project $project_name $::root/vivamir/project -part {vivamir.vivado.part} -force

        ### Design files
        add_files -fileset sources_1 -norecurse $des_files
        set includes_absolute {{}}
        foreach include $includes {{
            lappend includes_absolute $::root/$include
        }}
        add_files -fileset sources_1 $includes_absolute
        import_files -relative_to $root -fileset sources_1
        
        ### Includes
        set includes_imported {{}}
        foreach include $includes {{
            lappend includes_imported $::root/vivamir/project/$project_name.srcs/sources_1/imports/$root_name/$include
        }}
        set_property include_dirs $includes_imported [get_filesets sources_1]
        # TODO: Includes work only as globals?
        foreach include $includes_imported {{
            set_property is_global_include true [get_files $include/*]
        }}
        
        ### Simulation files
        add_files -fileset sim_1 -norecurse $sim_files
        import_files -relative_to $root -fileset sim_1
        
        ### Load user IPs
        set_property ip_repo_paths {f'$::root/{vivamir.ips.user_ip_repo_path}' if vivamir.ips.user_ip_repo_path.exists() else '""'} [current_project]
        update_ip_catalog

        ### Block Designs
        foreach bd $block_designs {{
            # Get the file stem
            set name [file rootname [file tail $bd]]
            
            # Create BD
            create_bd_design $name
            current_bd_design $name
            
            # Source Tcl
            source -notrace $bd

            # Validate BD
            regenerate_bd_layout
            validate_bd_design 
            save_bd_design

            # Generate wrapper
            make_wrapper -fileset sources_1 -top [get_files $name.bd] 

            # Add wrapper
            add_files -fileset sources_1 "$::root/vivamir/project/$project_name.gen/sources_1/bd/$name/hdl/${{name}}_wrapper.v"                
        }}
        
        ### Top modules
        set_property top_lib xil_defaultlib [get_filesets sources_1]
        set_property top {{{vivamir.design_top}}} [get_filesets sources_1]
        
        set_property top_lib xil_defaultlib [get_filesets sim_1]
        set_property top {{{vivamir.simulation_top}}} [get_filesets sim_1]
                            
        ### User Settings
        {'\n            '.join(prop.as_tcl() for prop in vivamir.vivado.properties)}

        ### Update
        update_compile_order -fileset sources_1
        update_compile_order -fileset sim_1
    """


def _generate_export(vivamir: Vivamir) -> str:
    return f"""
        ### Generated by vivamir.
        # Do not edit manually.
        #
        # Exports BDs and sources.
        # Version 1.1.0
        
        ### Commons
        source commons.tcl
        
        ### Open project
        open_project $::root/vivamir/project/$::project_name.xpr
        
        ### Export BDs
        proc vivamir_export_bds {{}} {{
            foreach bd [get_files *.bd] {{
                set errored [catch {{
                    open_bd_design $bd
                    set name [file rootname [file tail $bd]]
                    write_bd_tcl -force $::root/block_designs/$name.tcl
                    close_bd_design [current_bd_design]
                }} emsg]
                if {{$errored}} {{
                    puts $emsg
                }}
            }}
        }}
        vivamir_export_bds
        
        ### Export sources
        proc copytree {{src dst}} {{
            foreach file [glob -directory $src -nocomplain *] {{
                if [file isdirectory $file] {{
                    copytree $file [file join $dst [file rootname [file tail $file]]]
                }} else {{
                    puts "$file -> $dst"
                    file copy -force $file $dst
                }}
            }}
        }}
        
        proc vivamir_export_fileset {{kind {{new_file_dst $::root}}}} {{
            set imports [lindex [glob $::root/vivamir/project/$::project_name.srcs/$kind/imports/*] 0]
            copytree $imports $::root
        
            foreach file [get_files -quiet $::root/vivamir/project/$::project_name.srcs/$kind/new/*] {{
                file copy $file $new_file_dst
            }}
        }}
        
        vivamir_export_fileset sources_1 $::root/{vivamir.first_fileset(FilesetKind.DES).path}
        vivamir_export_fileset sim_1 $::root/{vivamir.first_fileset(FilesetKind.SIM).path}
    """


def _generate_open(_vivamir: Vivamir) -> str:
    return f"""
        ### Generated by vivamir.
        # Do not edit manually.
        #
        # Starts the GUI after setting up a fresh project.
        # Version 1.1.0
        
        ### Create the project.
        source project.tcl
        
        ### Start GUI
        ## Export at exit (disabled due to issues with stdin on `vivamir open`)
        # atexit {{
        #     puts stdout {{Confirm export? [y/N]}}
        #     puts stdout {{This will overwrite files!}}
        #     flush stdout
        #     if {{[string first y [gets stdin]] == 0}} {{
        #         source export.tcl
        #     }}
        # }}
        
        ## Continue logging to terminal
        # set pid [exec tail -n0 -f $::root/vivamir/vivado.log &]
        
        ## Wait for successful start (useful on macOS)
        while 1 {{
            set errored [catch start_gui emsg]
            if {{!$errored}} break
        
            puts [string trimright $emsg]
            puts "start_gui failed, waiting for input to retry (or close after Ctrl+C)."
            gets stdin
        }}
    """


def command_generate():
    """ Generates Tcl scripts based on the current configuration. """

    vivamir = Vivamir.search()
    if vivamir is None:
        print('[bold red]No vivamir configuration found in the current working directory.')
        return 1

    (vivamir.root / 'vivamir' / 'commons.tcl').write_text(textwrap.dedent(_generate_commons(vivamir)).strip() + '\n')
    (vivamir.root / 'vivamir' / 'project.tcl').write_text(textwrap.dedent(_generate_project(vivamir)).strip() + '\n')
    (vivamir.root / 'vivamir' / 'export.tcl').write_text(textwrap.dedent(_generate_export(vivamir)).strip() + '\n')
    (vivamir.root / 'vivamir' / 'open.tcl').write_text(textwrap.dedent(_generate_open(vivamir)).strip() + '\n')
